<?php

namespace Ice\ExternalUserBundle\Entity;

use Doctrine\ORM\EntityRepository,
    Doctrine\ORM\QueryBuilder;

use Doctrine\ORM\NoResultException;
use Ice\ExternalUserBundle\Entity\User;
use Lexik\Bundle\FormFilterBundle\Filter\FilterBuilderUpdaterInterface;
use Symfony\Component\Form\FormInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * @var QueryBuilder
     */
    private $qb;

    public function findByFiltered(array $filters) {
        $this->qb = $this->getFindAllQueryBuilder();

        if (isset($filters['attributeName'])) {
            $this->addAttributeName($filters['attributeName']);
        }

        if (isset($filters['attributeValue'])) {
            $this->addAttributeValue($filters['attributeValue']);
        }

        return $this->fetchAll();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getFindAllQueryBuilder()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('
                User
            ')
            ->from('IceExternalUserBundle:User', 'User')
            ->leftJoin('User.attributes', 'Attributes')
        ;

        return $qb;
    }

    private function addAttributeName($name)
    {
        $this->qb
            ->andWhere('Attributes.fieldName = :name')
            ->setParameter('name', $name);
    }

    private function addAttributeValue($value)
    {
        $this->qb
            ->andWhere('Attributes.value = :value')
            ->setParameter('value', $value);
    }

    public function findAllFiltered(FilterBuilderUpdaterInterface $filter, FormInterface $form)
    {
        $this->qb = $this->getFindAllQueryBuilder();
        $filter->addFilterConditions($form, $this->qb);
        return $this->fetchAll();
    }

    public function search($term)
    {
        $this->qb = $this->getFindAllQueryBuilder();
        $this->qb
            ->andWhere($this->qb->expr()->orX(
                $this->qb->expr()->like('User.firstNames', ':term'),
                $this->qb->expr()->like('User.middleNames', ':term'),
                $this->qb->expr()->like('User.lastNames', ':term')
            ))
            ->setParameter('term', '%'.$term.'%')
        ;

        return $this->fetchAll();
    }

    /**
     * @return array|null
     */
    private function fetchAll()
    {
        try {
            return $this->qb->getQuery()->getResult();
        } catch (NoResultException $e) {
            return null;
        }
    }

    /**
     * @return User|null
     */
    private function fetchOne()
    {
        try {
            return $this->qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }
}
